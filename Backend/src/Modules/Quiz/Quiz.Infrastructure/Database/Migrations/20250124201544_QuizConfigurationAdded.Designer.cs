// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Quiz.Infrastructure.Database;

#nullable disable

namespace Quiz.Infrastructure.Database.Migrations
{
    [DbContext(typeof(QuizDbContext))]
    [Migration("20250124201544_QuizConfigurationAdded")]
    partial class QuizConfigurationAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("quizzes")
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CategoryQuizSet", b =>
                {
                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("categories_id");

                    b.Property<Guid>("QuizSetsId")
                        .HasColumnType("uuid")
                        .HasColumnName("quiz_sets_id");

                    b.HasKey("CategoriesId", "QuizSetsId")
                        .HasName("pk_category_quiz_set");

                    b.HasIndex("QuizSetsId")
                        .HasDatabaseName("ix_category_quiz_set_quiz_sets_id");

                    b.ToTable("category_quiz_set", "quizzes");
                });

            modelBuilder.Entity("Quiz.Domain.Categories.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", "quizzes");
                });

            modelBuilder.Entity("Quiz.Domain.Questions.Choice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean")
                        .HasColumnName("is_correct");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_choices");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_choices_question_id");

                    b.ToTable("choices", "quizzes");
                });

            modelBuilder.Entity("Quiz.Domain.Questions.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uuid")
                        .HasColumnName("quiz_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_questions");

                    b.ToTable("questions", "quizzes");
                });

            modelBuilder.Entity("Quiz.Domain.QuizResults.QuizResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CompletionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completion_date");

                    b.Property<Guid>("QuizSetId")
                        .HasColumnType("uuid")
                        .HasColumnName("quiz_set_id");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("score");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_quiz_results");

                    b.HasIndex("QuizSetId")
                        .HasDatabaseName("ix_quiz_results_quiz_set_id");

                    b.ToTable("quiz_results", "quizzes");
                });

            modelBuilder.Entity("Quiz.Domain.QuizSets.QuizSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_quiz_sets");

                    b.ToTable("quiz_sets", "quizzes");
                });

            modelBuilder.Entity("Quiz.Domain.Quizzes.Quiz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("CreatedByAI")
                        .HasColumnType("boolean")
                        .HasColumnName("created_by_ai");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("difficulty");

                    b.Property<Guid>("QuizSetId")
                        .HasColumnType("uuid")
                        .HasColumnName("quiz_set_id");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_quizzes");

                    b.HasIndex("QuizSetId")
                        .HasDatabaseName("ix_quizzes_quiz_set_id");

                    b.ToTable("quizzes", "quizzes");
                });

            modelBuilder.Entity("CategoryQuizSet", b =>
                {
                    b.HasOne("Quiz.Domain.Categories.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_quiz_set_categories_categories_id");

                    b.HasOne("Quiz.Domain.QuizSets.QuizSet", null)
                        .WithMany()
                        .HasForeignKey("QuizSetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_quiz_set_quiz_sets_quiz_sets_id");
                });

            modelBuilder.Entity("Quiz.Domain.Questions.Choice", b =>
                {
                    b.HasOne("Quiz.Domain.Questions.Question", null)
                        .WithMany("Choices")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_choices_questions_question_id");
                });

            modelBuilder.Entity("Quiz.Domain.QuizResults.QuizResult", b =>
                {
                    b.HasOne("Quiz.Domain.QuizSets.QuizSet", null)
                        .WithMany()
                        .HasForeignKey("QuizSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_quiz_results_quiz_sets_quiz_set_id");
                });

            modelBuilder.Entity("Quiz.Domain.Quizzes.Quiz", b =>
                {
                    b.HasOne("Quiz.Domain.QuizSets.QuizSet", null)
                        .WithMany()
                        .HasForeignKey("QuizSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_quizzes_quiz_sets_quiz_set_id");
                });

            modelBuilder.Entity("Quiz.Domain.Questions.Question", b =>
                {
                    b.Navigation("Choices");
                });
#pragma warning restore 612, 618
        }
    }
}
