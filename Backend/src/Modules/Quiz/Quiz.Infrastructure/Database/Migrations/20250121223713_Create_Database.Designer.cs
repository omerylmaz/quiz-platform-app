// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Quiz.Infrastructure.Database;

#nullable disable

namespace Quiz.Infrastructure.Database.Migrations
{
    [DbContext(typeof(QuizDbContext))]
    [Migration("20250121223713_Create_Database")]
    partial class Create_Database
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("quizzes")
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CategoryQuizSet", b =>
                {
                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("categories_id");

                    b.Property<Guid>("QuizSetsId")
                        .HasColumnType("uuid")
                        .HasColumnName("quiz_sets_id");

                    b.HasKey("CategoriesId", "QuizSetsId")
                        .HasName("pk_category_quiz_set");

                    b.HasIndex("QuizSetsId")
                        .HasDatabaseName("ix_category_quiz_set_quiz_sets_id");

                    b.ToTable("category_quiz_set", "quizzes");
                });

            modelBuilder.Entity("Quiz.Domain.Categories.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", "quizzes");
                });

            modelBuilder.Entity("Quiz.Domain.QuizSets.QuizSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_quiz_sets");

                    b.ToTable("quiz_sets", "quizzes");
                });

            modelBuilder.Entity("Quiz.Domain.Quizzes.Quiz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("CreatedByAI")
                        .HasColumnType("boolean")
                        .HasColumnName("created_by_ai");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Difficulty")
                        .HasColumnType("integer")
                        .HasColumnName("difficulty");

                    b.Property<Guid>("QuizSetId")
                        .HasColumnType("uuid")
                        .HasColumnName("quiz_set_id");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_quizzes");

                    b.ToTable("quizzes", "quizzes");
                });

            modelBuilder.Entity("CategoryQuizSet", b =>
                {
                    b.HasOne("Quiz.Domain.Categories.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_quiz_set_categories_categories_id");

                    b.HasOne("Quiz.Domain.QuizSets.QuizSet", null)
                        .WithMany()
                        .HasForeignKey("QuizSetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_quiz_set_quiz_sets_quiz_sets_id");
                });
#pragma warning restore 612, 618
        }
    }
}
