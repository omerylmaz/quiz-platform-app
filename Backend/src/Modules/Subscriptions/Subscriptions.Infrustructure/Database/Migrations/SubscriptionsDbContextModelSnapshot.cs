// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Subscriptions.Infrustructure.Database;

#nullable disable

namespace Subscriptions.Infrustructure.Database.Migrations
{
    [DbContext(typeof(SubscriptionsDbContext))]
    partial class SubscriptionsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("subscriptions")
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SubscriptionSubscriptionBenefit", b =>
                {
                    b.Property<Guid>("SubscriptionBenefitsId")
                        .HasColumnType("uuid")
                        .HasColumnName("subscription_benefits_id");

                    b.Property<Guid>("SubscriptionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("subscriptions_id");

                    b.HasKey("SubscriptionBenefitsId", "SubscriptionsId")
                        .HasName("pk_subscription_subscription_benefit");

                    b.HasIndex("SubscriptionsId")
                        .HasDatabaseName("ix_subscription_subscription_benefit_subscriptions_id");

                    b.ToTable("subscription_subscription_benefit", "subscriptions");
                });

            modelBuilder.Entity("Subscriptions.Domain.Payments.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payment_status");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("transaction_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_payments");

                    b.ToTable("payments", "subscriptions");
                });

            modelBuilder.Entity("Subscriptions.Domain.SubscriptionBenefits.SubscriptionBenefit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.HasKey("Id")
                        .HasName("pk_subscription_benefits");

                    b.ToTable("subscription_benefits", "subscriptions");
                });

            modelBuilder.Entity("Subscriptions.Domain.Subscriptions.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("pk_subscriptions");

                    b.ToTable("subscriptions", "subscriptions");
                });

            modelBuilder.Entity("Subscriptions.Domain.UserSubscriptions.UserSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("subscription_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_subscriptions");

                    b.ToTable("user_subscriptions", "subscriptions");
                });

            modelBuilder.Entity("SubscriptionSubscriptionBenefit", b =>
                {
                    b.HasOne("Subscriptions.Domain.SubscriptionBenefits.SubscriptionBenefit", null)
                        .WithMany()
                        .HasForeignKey("SubscriptionBenefitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subscription_subscription_benefit_subscription_benefits_sub");

                    b.HasOne("Subscriptions.Domain.Subscriptions.Subscription", null)
                        .WithMany()
                        .HasForeignKey("SubscriptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subscription_subscription_benefit_subscriptions_subscriptio");
                });

            modelBuilder.Entity("Subscriptions.Domain.SubscriptionBenefits.SubscriptionBenefit", b =>
                {
                    b.OwnsOne("Subscriptions.Domain.SubscriptionBenefits.Benefit", "Benefit", b1 =>
                        {
                            b1.Property<Guid>("SubscriptionBenefitId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("Name");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("Value");

                            b1.HasKey("SubscriptionBenefitId");

                            b1.ToTable("subscription_benefits", "subscriptions");

                            b1.WithOwner()
                                .HasForeignKey("SubscriptionBenefitId")
                                .HasConstraintName("fk_subscription_benefits_subscription_benefits_id");
                        });

                    b.Navigation("Benefit")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
